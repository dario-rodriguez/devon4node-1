:toc: macro
toc::[]

= devon4node CLI

|====
| *Arguments*    | *Description*
|--help, -h      | Shows help
|-v, --version   | Shows version number
|====

== new

|========
| *Arguments*           | *Description*
| --no-interactive, -n  | Execute the command without ask anything to the user
| --dry-run             | Allow to test changes before execute command.
| --skip-git, -g        | Allow to skip git repository initialization.
| --skip-install, -s    | Allow to skip package installation.
|========

== generate

|========
| *Arguments*           | *Description*
| --skip-install, -s    | Allow to skip package installation.
| --dry-run             | Allow to test changes before execute command.
| --path,               | Path to project.
|========

=== application
Create a devon4node application.

|========
| *Arguments*           | *Description*
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path,               | Path to project.
| --name, -n            | The name of the application.
|========

=== angular-app
Create a new Angular application.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path,               | Path to project.
| --initApp             | Flag to skip the angular application generation.
| --name, -n            | The name of the application.
|========

=== class
Create a new class.

|========
| *Arguments*           | *Description*
|--dry-run, -d          | Allow to test changes before execute command.
|--path, -p             | The path to create the class.
|--name, -n             | The name of the class.
|--flat                 | Flag to indicate if a directory is created.
|--spec                 | Specifies if a spec file is generated.
|--language             | Nest class language (ts/js).
|--sourceRoot           | Nest controller source root directory.
|========

=== controller
Create a Nest controller.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the controller.
| --name, -n            |  The name of the controller.
| --spec                | Specifies if a spec file is generated.
|========

=== decorator
Create a Nest decorator.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the decorator.
| --name, -n            | The name of the decorator.
| --language            | Nest decorator language (ts/js).
| --sourceRoot          | Nest decorator source root directory.
| --flat                | Flag to indicate if a directory is created.
|========

=== filter
Create a Nest filter.

|========
| *Arguments*           | *Description*
|--dry-run, -d          | Allow to test changes before execute command.
|--path, -p             | The path to create the filter.
|--name, -n             | The name of the filter.
|--language             | Nest filter language (ts/js).
|--sourceRoot           | Nest filter source root directory.
|--flat                 | Flag to indicate if a directory is created.
|--spec                 | Specifies if a spec file is generated.
|========

=== gateway
Create a Nest gateway.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the gateway.
| --name, -n            | The name of the gateway.
| --language            | Nest gateway language (ts/js).
| --sourceRoot          | Nest gateway source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

=== guard
Create a Nest guard.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the guard.
| --name, -n            | The name of the guard.
| --language            | Nest guard language (ts/js).
| --sourceRoot          | Nest guard source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

=== interceptor
Create a Nest interceptor.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the interceptor.
| --name, -n            | The name of the interceptor.
| --language            | Nest interceptor language (ts/js).
| --sourceRoot          | Nest interceptor source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

=== interface
Create a Nest interface.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the interface.
| --name, -n            | The name of the interface.
| --sourceRoot          | Nest interface source root directory
| --flat                | Flag to indicate if a directory is created.
|========

=== middleware
Create a Nest middleware.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the middleware.
| --name, -n            | The name of the middleware.
| --language            | Nest middleware language (ts/js).
| --sourceRoot          | Nest middleware source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

=== module
Create a Nest module.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the module.
| --name, -n            | The name of the module.
| --module              | The path to import the module.
| --language            | Nest module language (ts/js).
| --sourceRoot          | Nest module source root directory.
| --skipImport          | Flag to skip the module import.
|========

=== pipe
Create a Nest pipe.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the pipe.
| --name, -n            | The name of the pipe.
| --language            | Nest pipe language (ts/js).
| --sourceRoot          | Nest pipe source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

=== provider
Create a Nest provider.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the provider.
| --name, -n            | The name of the provider.
| --language            | Nest provider language (ts/js).
| --sourceRoot          | Nest provider source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

=== service
Create a Nest service.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the service.
| --name, -n            | The name of the service.
| --spec                | Specifies if a spec file is generated.
|========

=== resolver
Create a Nest resolver.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the resolver.
| --name, -n            | The name of the resolver.
| --language            | Nest resolver language (ts/js).
| --sourceRoot          | Nest resolver source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

=== configuration
Create a Nest CLI configuration.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path,               | Path to project.
|========

=== library
Create a Nest library (mono-repo).

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the library.
| --name, -n            | The name of the library.
| --prefix              | The prefix of the library.
| --language            | Nest library language.
| --rootDir             | The libraries root directory.
|========

=== sub-app
Create a Nest application (mono-repo).

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the application.
| --name, -n            | The name of the application.
| --language            | Nest application language.
| --rootDir             | Applications root directory.
|========

=== typeorm
Initialice typeorm into your current project in a correct way.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
| --db                  | Database type.
|========

=== entity
Add a TypeOrm entity to your project

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Change the application folder where you will create the entity
| --name, -n            | The entity name. To create a entity with name Banana in the module fruits you need to introduce fruits/banana
|========

=== config-module
Add the config module to the project.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
|========

=== crud
Generate CRUD methods for a entity.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Change the application folder where you will create the crud
| --name, -n            | The crud name. To create crud with name Banana in the module fruits you need to introduce fruits/banana
|========

=== mailer
Add @devon4node/mailer module to project.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
|========

=== swagger
Add swagger module to project.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
|========

=== auth-jwt
Add the auth JWT module to the project.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
|========

=== all-in-one
Execute multiple schematics at the same time.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to config file
|========

=== security
Add cors and helmet to your project.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
|========


== db

Execute a database command. Same as typeorm CLI.

=== schema:sync
Synchronizes your entities with database schema. It runs schema update queries on all connections you have. To run update queries on a concrete connection use -c option.

|========
| *Arguments*           | *Description*
--help, -h        Shows help  [booleano]
--connection, -c  Name of the connection on which schema synchronization needs to to run.
--config, -f      Name of the file with connection configuration.
--version, -v     Shows number version
|========

=== schema:log
Shows sql to be executed by schema:sync command. It shows sql log only for your default connection. To run update queries on a concrete connection use -c option.

|========
| *Arguments*           | *Description*
--help, -h        Shows help  [booleano]
--connection, -c  Name of the connection on which schema synchronization needs to to run.
--config, -f      Name of the file with connection configuration.
--version, -v     Shows number version
|========

=== schema:drop
Drops all tables in the database on your default connection. To drop table of a concrete connection's database use -c option.

|========
| *Arguments*           | *Description*
--help, -h        Shows help  [booleano]
--connection, -c  Name of the connection on which schema synchronization needs to to run.
--config, -f      Name of the file with connection configuration.
--version, -v     Shows number version
|========

=== query
Executes given SQL query on a default connection. Specify connection name to run query on a specific connection.

|========
| *Arguments*           | *Description*
--help, -h        Shows help  [booleano]
--connection, -c  Name of the connection on which schema synchronization needs to to run.
--config, -f      Name of the file with connection configuration.
--version, -v     Shows number version
|========

=== entity:create
Generates a new entity.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which to run a query
| --name, -n            | Name of the entity class.
| --dir                 | Directory where entity should be created.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

=== subscriber:create
Generates a new subscriber.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which to run a query
| --name, -n            | Name of the entity class.
| --dir                 | Directory where entity should be created.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

=== migration:create
Creates a new migration file.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which to run a query
| --name, -n            | Name of the entity class.
| --dir                 | Directory where entity should be created.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

=== migration:generate
Generates a new migration file with sql needs to be executed to update schema.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which to run a query
| --name, -n            | Name of the entity class.
| --dir                 | Directory where entity should be created.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

=== migration:run
Runs all pending migrations.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which run a query.
| --transaction, -t     | Indicates if transaction should be used or not for migration run. Enabled by default.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

=== migration:show
Show all migrations and whether they have been run or not

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which run a query.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

=== migration:revert
Reverts last executed migration.

|========
| *Arguments*           | *Description*
| help, -h              | Shows help
| connection, -c        | Name of the connection on which run a query.
| transaction, -t       | Indicates if transaction should be used or not for migration revert. Enabled by default.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

=== version
Prints TypeORM version this project uses.

|========
| *Arguments*           | *Description*
|--help, -h             | Shows help
|--version, -v          | Shows number version
|========

=== cache:clear
Clears all data stored in query runner cache.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which run a query.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

== Code autocompletion

[source,bash]
----
_yargs_completions()
{
  local cur_word args type_list

  cur_word="${COMP_WORDS[COMP_CWORD]}"
  args=("${COMP_WORDS[@]}")

  # ask yargs to generate completions.
  type_list=$(devon4node --get-yargs-completions "${args[@]}")

  COMPREPLY=( $(compgen -W "${type_list}" -- ${cur_word}) )

  # if no match was found, fall back to filename completion
  if [ ${#COMPREPLY[@]} -eq 0 ]; then
    COMPREPLY=()
  fi

  return 0
}
complete -o default -F _yargs_completions devon4node
----
